# Production Docker Compose configuration for AcademyQuest
# This configuration is optimized for production VM deployment
# 
# Usage:
#   docker-compose -f docker-compose.production.yml up -d
#   docker-compose -f docker-compose.production.yml down
#   docker-compose -f docker-compose.production.yml logs -f app

name: academyquest-production

services:
  # PostgreSQL Database Service - Production Configuration
  db:
    image: postgres:15-alpine
    container_name: academyquest_db_prod
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - academyquest-prod-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Redis Service - Production Configuration
  redis:
    image: redis:7-alpine
    container_name: academyquest_redis_prod
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data_prod:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - academyquest-prod-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Rails Application Service - Production Configuration
  app:
    image: lynchz/academyquest:latest
    container_name: academyquest_app_prod
    restart: unless-stopped
    ports:
      - "${APP_PORT:-3000}:3000"
    environment:
      RAILS_ENV: production
      DATABASE_URL: postgresql://${DB_USERNAME}:${DB_PASSWORD}@db:5432/${DB_NAME}
      REDIS_URL: redis://redis:6379/0
      RAILS_MASTER_KEY: ${RAILS_MASTER_KEY}
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      RAILS_LOG_TO_STDOUT: "true"
      RAILS_SERVE_STATIC_FILES: "true"
      RAILS_LOG_LEVEL: "info"
      WEB_CONCURRENCY: 2
      MAX_THREADS: 5
    volumes:
      - rails_storage_prod:/rails/storage
      - rails_log_prod:/rails/log
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - academyquest-prod-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Nginx Reverse Proxy - Production Configuration
  nginx:
    image: nginx:alpine
    container_name: academyquest_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/academyquest.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - rails_storage_prod:/var/www/rails/storage:ro
    depends_on:
      - app
    networks:
      - academyquest-prod-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Backup Service (optional)
  backup:
    image: postgres:15-alpine
    container_name: academyquest_backup_prod
    restart: "no"
    environment:
      PGPASSWORD: ${DB_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    depends_on:
      - db
    networks:
      - academyquest-prod-network
    profiles:
      - backup
    command: >
      sh -c "
        echo 'Backup service ready. Run manually with:'
        echo 'docker-compose -f docker-compose.production.yml run --rm backup /backup.sh'
        tail -f /dev/null
      "

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  rails_storage_prod:
    driver: local
  rails_log_prod:
    driver: local

networks:
  academyquest-prod-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16